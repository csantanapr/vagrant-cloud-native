- hosts: all
  become: yes
  become_method: sudo
  vars:
    appsody_version: 0.6.1
    argocd_version: 1.5.2
    arkade_version: 0.3.2
    bat_version: 0.15.0
    calicoctl_version: 3.13.3
    cloudctl_version: 3.3.0
    docker_version: 19.03.8
    github_cli_version: 0.7.0
    golang_version: 1.14.2
    gradle_autocompletion_version: 1.4.1
    gradle_version: 6.3
    helm_version: 3.2.0
    ibm_garage_cloud_cli_version: 0.5.3
    ibmcloud_version: 1.0.0
    inlets_version: 2.7.0
    inletsctl_version: 0.5.2
    jdk_version: 14-openj9
    jmeter_version: 5.2.1
    jq_version: 1.6
    kind_version: 0.8.1
    kn_version: 0.14.0
    ko_version: 0.5.0
    kubectl_version: 1.18.2
    kubectx_version: 0.8.0
    kubefwd_version: 1.13.1
    kustomize_version: 3.5.4
    maven_version: 3.6.3
    minikube_version: 1.9.2
    mongodb_version: 4.2
    nvm_version: 0.35.3
    oc_version: 4.3
    odo_version: 1.2.0
    popeye_version: 0.8.1
    s2i_version: 1.3.0
    skaffold_version: 1.8.0
    solsa_version: 0.3.6
    stern_version: 1.11.0
    terraform_ibmcloud_version: 1.5.0
    terraform_version: 0.12.24
    tkn_version: 0.8.0
    tm_version: 0.2.0
    vegeta_version: 12.8.3
    yq_version: 3.3.0
  tasks:
    - name: install system updates
      yum: name=* state=latest update_cache=yes

    - name: Disable SELinux
      selinux:
        state: disabled

    - name: disable swap
      shell: /usr/sbin/swapoff -a

    - name: disable swap permanently
      lineinfile:
        path: /etc/fstab
        regexp: "^[^#].*swap.*$"
        state: absent

    - name: delete swapfile
      file:
        path: /swapfile
        state: absent

    - name: install prerequisites
      yum:
        name: [vim, socat, device-mapper-persistent-data, lvm2, telnet, tcpdump]

    - name: Add docker repository centos8
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0755

    - name: install docker-ce
      shell: dnf install -y docker-ce --nobest

    - name: start and enable docker service
      service:
        name: docker
        enabled: yes
        state: started

    - name: Configure firewall-cmd
      shell: |
        firewall-cmd --zone=public --add-masquerade --permanent
        firewall-cmd --reload

    - name: Add vagrant user to docker group
      user:
        name: vagrant
        groups: docker
        append: yes

    - name: install conntrack
      dnf:
        name: conntrack
        state: present

    - name: install minikube rpm
      yum:
        name: https://github.com/kubernetes/minikube/releases/download/v{{ minikube_version }}/minikube-{{ minikube_version }}-0.x86_64.rpm
        state: present

    - name: Install kubernetes in docker (kind)
      get_url:
        url: https://github.com/kubernetes-sigs/kind/releases/download/v{{ kind_version }}/kind-linux-amd64
        dest: /usr/local/bin/kind
        mode: 0755

    - name: add kubernetes repository
      yum_repository:
        name: Kubernetes
        description: Kubernetes
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        gpgcheck: yes
        gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

    - name: install kubectl
      yum:
        name: kubectl-{{ kubectl_version }}

    - name: Download kube-ps1
      get_url:
        url: https://raw.githubusercontent.com/jonmosco/kube-ps1/master/kube-ps1.sh
        dest: /home/vagrant/.kube-ps1.sh
        owner: vagrant
        group: vagrant
        mode: 0755

    - name: Edit /etc/motd
      lineinfile:
        path: /etc/motd
        line: echo You have 2 options to run kubernetes
        insertafter: EOF
    - name: Edit /etc/motd
      lineinfile:
        path: /etc/motd
        line: echo 1. kind create cluster
        insertafter: EOF
    - name: Edit /etc/motd
      lineinfile:
        path: /etc/motd
        line: echo 2. minikube start --driver=docker
        insertafter: EOF

    - name: Create a directory /home/vagrant/.kube
      file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant
        mode: "0755"

    - name: extract helm
      unarchive:
        src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
        remote_src: yes
        dest: /usr/local/bin
        extra_opts:
          - "linux-amd64/helm"
          - "--strip-components=1"

    - name: install git
      yum:
        name: git

    - name: install htop
      yum:
        name: htop

    - name: Install bat yaml
      unarchive:
        src: https://github.com/sharkdp/bat/releases/download/v{{ bat_version }}/bat-v{{ bat_version }}-x86_64-unknown-linux-musl.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Install kubectx and kubens
      unarchive:
        src: https://github.com/ahmetb/kubectx/archive/v{{ kubectx_version }}.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Create a symbolic link for autocomplete kubectx
      file:
        src: /usr/local/bin/completion/kubectx.bash
        dest: /usr/share/bash-completion/completions/kubectx
        state: link

    - name: Create a symbolic link for autocomplete kubens
      file:
        src: /usr/local/bin/completion/kubens.bash
        dest: /usr/share/bash-completion/completions/kubens
        state: link

    - name: Install Openshift Client CLI oc
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/oc/{{ oc_version }}/linux/oc.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Install Openshift Do CLI odo
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/odo/v{{ odo_version }}/odo-linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Setup odo preferences
      shell: |
        odo preference set experimental true -f
        odo preference set updatenotification true -f
      become: yes
      become_user: vagrant

    - name: Install Knative kn CLI
      get_url:
        url: https://github.com/knative/client/releases/download/v{{ kn_version }}/kn-linux-amd64
        dest: /usr/local/bin/kn
        mode: 0755

    - name: Install Tekton tkn cli from rpm
      yum:
        name: https://github.com/tektoncd/cli/releases/download/v{{ tkn_version }}/tektoncd-cli-{{ tkn_version }}_Linux-64bit.rpm
        state: present

    - name: Install Argocd CLI
      get_url:
        url: https://github.com/argoproj/argo-cd/releases/download/v{{ argocd_version }}/argocd-linux-amd64
        dest: /usr/local/bin/argocd
        mode: 0755

    - name: Install podman
      yum:
        name: podman

    - name: Enable sudo podman alias podman
      lineinfile:
        path: /home/vagrant/.bashrc
        line: alias podman="sudo podman"
        insertafter: EOF

    - name: Install buildah
      yum:
        name: buildah

    - name: Enable sudo buildah alias buildah
      lineinfile:
        path: /home/vagrant/.bashrc
        line: alias buildah="sudo buildah"
        insertafter: EOF

    - name: Install skopeo
      yum:
        name: skopeo

    - name: Enable sudo skopeo alias skopeo
      lineinfile:
        path: /home/vagrant/.bashrc
        line: alias skopeo="sudo skopeo"
        insertafter: EOF

    - name: Install python3
      yum:
        name: python3

    - name: Install httpie
      shell: pip3 install --upgrade https://github.com/jakubroztocil/httpie/archive/master.tar.gz

    - name: Install nano editor
      yum:
        name: nano

    - name: Install Stern CLI
      get_url:
        url: https://github.com/wercker/stern/releases/download/{{ stern_version }}/stern_linux_amd64
        dest: /usr/local/bin/stern
        mode: 0755

    - name: Install golang
      unarchive:
        src: https://dl.google.com/go/go{{ golang_version }}.linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: Add go to PATH
      lineinfile:
        path: /home/vagrant/.bashrc
        line: export PATH=$PATH:/usr/local/go/bin
        insertafter: EOF

    - name: Install jq CLI
      get_url:
        url: https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-linux64
        dest: /usr/local/bin/jq
        mode: 0755

    - name: Install yq CLI
      get_url:
        url: https://github.com/mikefarah/yq/releases/download/{{ yq_version }}/yq_linux_amd64
        dest: /usr/local/bin/yq
        mode: 0755

    - name: Install hey CLI
      get_url:
        url: https://storage.googleapis.com/hey-release/hey_linux_amd64
        dest: /usr/local/bin/hey
        mode: 0755

    - name: Download nvm
      get_url:
        url: https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh
        dest: /tmp/nvm_install.sh
        mode: 0755

    - name: Install nvm and nodejs 12
      shell: |
        bash /tmp/nvm_install.sh
        export NVM_DIR="$HOME/.nvm"
        source "$NVM_DIR/nvm.sh"
        nvm install 12
      become: yes
      become_user: vagrant

    - name: Install Apache Bench ab
      yum:
        name: httpd-tools

    - name: Install Mysql client
      yum:
        name: mysql

    - name: Install tmux
      yum:
        name: tmux

    - name: Install s2i
      unarchive:
        src: https://github.com/openshift/source-to-image/releases/download/v{{ s2i_version }}/source-to-image-v{{ s2i_version }}-eed2850f-linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Install screen
      yum:
        name: screen

    - name: Install appsody
      yum:
        name: https://github.com/appsody/appsody/releases/download/{{ appsody_version }}/appsody-{{ appsody_version }}-1.x86_64.rpm
        state: present

    - name: Install ibmcloud cli
      unarchive:
        src: https://public.dhe.ibm.com/cloud/bluemix/cli/bluemix-cli/{{ ibmcloud_version }}/binaries/IBM_Cloud_CLI_{{ ibmcloud_version }}_linux_amd64.tgz
        dest: /opt
        remote_src: yes

    - name: Create a symbolic link for ibmcloud
      file:
        src: /opt/IBM_Cloud_CLI/ibmcloud
        dest: /usr/local/bin/ibmcloud
        state: link

    - name: Create a symbolic link for ibmcloud-analytics
      file:
        src: /opt/IBM_Cloud_CLI/ibmcloud-analytics
        dest: /usr/local/bin/ibmcloud-analytics
        state: link

    - name: Setup autocomplete for ibmcloud
      file:
        src: /opt/IBM_Cloud_CLI/autocomplete/bash_autocomplete
        dest: /usr/share/bash-completion/completions/ibmcloud
        state: link

    - name: Install ibmcloud plugins
      shell: |
        set -e
        /opt/IBM_Cloud_CLI/ibmcloud plugin install container-registry
        /opt/IBM_Cloud_CLI/ibmcloud plugin install kubernetes-service
        /opt/IBM_Cloud_CLI/ibmcloud plugin install functions
        /opt/IBM_Cloud_CLI/ibmcloud plugin install cloud-databases
        /opt/IBM_Cloud_CLI/ibmcloud plugin install cloud-object-storage
        /opt/IBM_Cloud_CLI/ibmcloud plugin install event-streams
        /opt/IBM_Cloud_CLI/ibmcloud plugin install vpc-infrastructure
        /opt/IBM_Cloud_CLI/ibmcloud plugin install schematics
        /opt/IBM_Cloud_CLI/ibmcloud plugin install watson
        exit 0
      become: yes
      become_user: vagrant

    - name: Download skaffold
      get_url:
        url: https://storage.googleapis.com/skaffold/releases/v{{ skaffold_version }}/skaffold-linux-amd64
        dest: /usr/local/bin/skaffold
        mode: 0755

    - name: Install zip
      yum:
        name: [zip, unzip]

    - name: Install terraform
      unarchive:
        src: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
        dest: /usr/local/bin
        remote_src: yes

    - name: Create a directory /home/vagrant/.terraform.d/plugins
      file:
        path: /home/vagrant/.terraform.d/plugins
        state: directory
        owner: vagrant
        group: vagrant
        mode: 0755

    - name: Install terraform ibm modules
      unarchive:
        src: https://github.com/IBM-Cloud/terraform-provider-ibm/releases/download/v{{ terraform_ibmcloud_version }}/linux_amd64.zip
        dest: /home/vagrant/.terraform.d/plugins
        remote_src: yes

    - name: Make executable .terraform.d/plugins
      file:
        path: /home/vagrant/.terraform.d/plugins
        state: directory
        recurse: yes
        mode: +rwx

    - name: Download calicoctl
      get_url:
        url: https://github.com/projectcalico/calicoctl/releases/download/v{{ calicoctl_version }}/calicoctl-linux-amd64
        dest: /usr/local/bin/calicoctl
        mode: 0755

    - name: Install ibm-garage-cloud-cli and ibm solsa
      shell: |
        set -e
        export NVM_DIR="$HOME/.nvm"
        source "$NVM_DIR/nvm.sh"
        npm i -g yo
        npm i -g @ibmgaragecloud/cloud-native-toolkit-cli@{{ ibm_garage_cloud_cli_version }}
        npm i -g solsa@{{ solsa_version }}
      become: yes
      become_user: vagrant

    - name: Install kustomize
      unarchive:
        src: https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv{{ kustomize_version }}/kustomize_v{{ kustomize_version }}_linux_amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Add adoptOpenJDK yum repository
      yum_repository:
        name: AdoptOpenJDK
        description: AdoptOpenJDK - $basearch
        baseurl: http://adoptopenjdk.jfrog.io/adoptopenjdk/rpm/centos/$releasever/$basearch
        gpgcheck: yes
        gpgkey: https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public

    - name: Install java
      yum:
        name: adoptopenjdk-{{ jdk_version }}

    - name: Add JAVA_HOME
      lineinfile:
        path: /home/vagrant/.bashrc
        line: export JAVA_HOME=/usr/lib/jvm/adoptopenjdk-{{ jdk_version }}
        insertafter: EOF

    - name: Create a directory /opt/maven
      file:
        path: /opt/maven
        state: directory
        mode: 0755

    - name: Download maven
      unarchive:
        src: https://mirrors.ocf.berkeley.edu/apache/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz
        dest: /opt/maven
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Add maven to PATH
      lineinfile:
        path: /home/vagrant/.bashrc
        line: export PATH=$PATH:/opt/maven/bin
        insertafter: EOF

    - name: Install emacs
      yum:
        name: emacs

    - name: Install tree
      yum:
        name: tree

    - name: Create a directory /opt/gradle
      file:
        path: /opt/gradle
        state: directory
        mode: 0755

    - name: Download gradle
      unarchive:
        src: https://services.gradle.org/distributions/gradle-{{ gradle_version }}-bin.zip
        dest: /opt
        remote_src: yes

    - name: Add gradle to PATH
      lineinfile:
        path: /home/vagrant/.bashrc
        line: export PATH=$PATH:/opt/gradle-6.3/bin
        insertafter: EOF

    - name: Download gradle autocompletion
      get_url:
        url: https://raw.githubusercontent.com/gradle/gradle-completion/v{{ gradle_autocompletion_version }}/gradle-completion.bash
        dest: /usr/share/bash-completion/completions/gradle
        mode: 0755

    - name: Install genisoimage
      yum:
        name: genisoimage

    - name: Download aws cli
      unarchive:
        src: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /opt
        remote_src: yes

    - name: Install aws cli
      shell: /opt/aws/install

    - name: Add aws completion
      lineinfile:
        path: /home/vagrant/.bashrc
        line: complete -C '/usr/local/bin/aws_completer' aws
        insertafter: EOF

    - name: Add Google Cloud SDK yum repo
      blockinfile:
        path: /etc/yum.repos.d/google-cloud-sdk.repo
        block: |
          [google-cloud-sdk]
          name=Google Cloud SDK
          baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                 https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        insertafter: EOF
        create: yes

    - name: Install gcloud cli via yum
      yum:
        name: google-cloud-sdk

    - name: Add Azure CLI yum repo
      blockinfile:
        path: /etc/yum.repos.d/azure-sdk.repo
        block: |
          [azure-sdk]
          name=Azure SDK
          baseurl=https://packages.microsoft.com/yumrepos/azure-cli
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc
        insertafter: EOF
        create: yes

    - name: Install Azure CLI
      yum:
        name: azure-cli

    - name: Install Github Beta CLI gh
      yum:
        name: https://github.com/cli/cli/releases/download/v{{ github_cli_version }}/gh_{{ github_cli_version }}_linux_amd64.rpm
        state: present

    - name: Install git-extras
      yum:
        name: git-extras

    - name: Install tig
      yum:
        name: tig

    - name: Install IBM cloudctl
      unarchive:
        src: https://github.com/IBM/cloud-pak-cli/releases/download/v{{ cloudctl_version }}/cloudctl-linux-amd64.tar.gz
        dest: /opt
        remote_src: yes

    - name: Create a symbolic link for IBM cloudctl
      file:
        src: /opt/cloudctl-linux-amd64
        dest: /usr/local/bin/cloudctl
        state: link

    - name: Install arkade
      get_url:
        url: https://github.com/alexellis/arkade/releases/download/{{ arkade_version }}/arkade
        dest: /usr/local/bin/arkade
        mode: 0755

    - name: Install inlets
      get_url:
        url: https://github.com/inlets/inlets/releases/download/{{ inlets_version }}/inlets
        dest: /usr/local/bin/inlets
        mode: 0755

    - name: Install inletsctl
      unarchive:
        src: https://github.com/inlets/inletsctl/releases/download/{{ inletsctl_version }}/inletsctl.tgz
        dest: /usr/local
        remote_src: yes

    - name: Install vegeta
      unarchive:
        src: https://github.com/tsenart/vegeta/releases/download/v{{ vegeta_version }}/vegeta-{{ vegeta_version }}-linux-amd64.tar.gz
        remote_src: yes
        dest: /usr/local/bin
        extra_opts:
          - "vegeta"

    - name: Install s3cmd
      yum:
        name: s3cmd

    - name: Install postgresql
      yum:
        name: postgresql

    - name: Add MongoDB Community Edition repo
      blockinfile:
        path: /etc/yum.repos.d/mongodb-org-{{ mongodb_version }}.repo
        block: |
          [mongodb-org-{{ mongodb_version }}]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/{{ mongodb_version }}/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-{{ mongodb_version }}.asc
        insertafter: EOF
        create: yes

    - name: Install mongodb shell
      yum:
        name: mongodb-org-shell

    - name: Install ko
      unarchive:
        src: https://github.com/google/ko/releases/download/v{{ ko_version }}/ko_{{ ko_version }}_Linux_x86_64.tar.gz
        remote_src: yes
        dest: /usr/local/bin
        extra_opts:
          - "ko"

    - name: Install tm
      get_url:
        url: https://github.com/triggermesh/tm/releases/download/v{{ tm_version }}/tm-linux-amd64
        dest: /usr/local/bin/tm
        mode: 0755

    - name: Install serverless framework
      shell: |
        set -e
        export NVM_DIR="$HOME/.nvm"
        source "$NVM_DIR/nvm.sh"
        npm i -g serverless
      become: yes
      become_user: vagrant

    - name: Create directory
      file:
        path: /opt/apache-jmeter
        state: directory
        mode: 0777

    - name: Install Apache jmeter
      unarchive:
        src: https://downloads.apache.org/jmeter/binaries/apache-jmeter-{{ jmeter_version }}.tgz
        remote_src: yes
        dest: /opt/apache-jmeter
        extra_opts:
          - "--strip-components=1"

    - name: Add jmeter to PATH
      lineinfile:
        path: /home/vagrant/.bashrc
        line: export PATH=$PATH:/opt/apache-jmeter/bin
        insertafter: EOF

    - name: Install Popeye
      unarchive:
        src: https://github.com/derailed/popeye/releases/download/v{{ popeye_version }}/popeye_Linux_x86_64.tar.gz
        remote_src: yes
        dest: /usr/local/bin
        extra_opts:
          - "popeye"

    - name: install kubefwd
      yum:
        name: https://github.com/txn2/kubefwd/releases/download/{{ kubefwd_version }}/kubefwd_amd64.rpm
        state: present

    - name: Add to bashrc alias kubefwd
      lineinfile:
        path: /home/vagrant/.bashrc
        line: alias kubefwd="sudo HOME=/home/vagrant  /usr/local/bin/kubefwd"
        insertafter: EOF

    - name: Add to bashrc alias k
      lineinfile:
        path: /home/vagrant/.bashrc
        line: alias k="kubectl"
        insertafter: EOF
    - name: Add to bashrc kubectl completion
      lineinfile:
        path: /home/vagrant/.bashrc
        line: source <(kubectl completion bash)
        insertafter: EOF
    - name: Add to bashrc k completion
      lineinfile:
        path: /home/vagrant/.bashrc
        line: source <(kubectl completion bash | sed s/kubectl/k/g)
        insertafter: EOF
    - name: Add to bashrc .kube-ps1
      lineinfile:
        path: /home/vagrant/.bashrc
        line: source /home/vagrant/.kube-ps1.sh
        insertafter: EOF
    - name: Add to bashrc ip address for PS1
      lineinfile:
        path: /home/vagrant/.bashrc
        line: _ip_a() { echo "$(ip -br address show dev eth1 | awk '{print substr($3,1,index($3,"/")-1);}')"; }
        insertafter: EOF
    - name: Add to bashrc PS1
      lineinfile:
        path: /home/vagrant/.bashrc
        line: PS1='[student@workstation $(_ip_a) \W $(kube_ps1)]\$ '
        insertafter: EOF

    - name: Fix permissions for /usr/local/bin
      file:
        path: /usr/local/bin
        state: directory
        mode: 0755
